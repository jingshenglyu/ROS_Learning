// Generated by gencpp from file turtle_control/SpawnTurtleRequest.msg
// DO NOT EDIT!


#ifndef TURTLE_CONTROL_MESSAGE_SPAWNTURTLEREQUEST_H
#define TURTLE_CONTROL_MESSAGE_SPAWNTURTLEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtle_control
{
template <class ContainerAllocator>
struct SpawnTurtleRequest_
{
  typedef SpawnTurtleRequest_<ContainerAllocator> Type;

  SpawnTurtleRequest_()
    : tur_name()
    , pose_x(0.0)
    , pose_y(0.0)
    , tur_theta(0.0)  {
    }
  SpawnTurtleRequest_(const ContainerAllocator& _alloc)
    : tur_name(_alloc)
    , pose_x(0.0)
    , pose_y(0.0)
    , tur_theta(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tur_name_type;
  _tur_name_type tur_name;

   typedef double _pose_x_type;
  _pose_x_type pose_x;

   typedef double _pose_y_type;
  _pose_y_type pose_y;

   typedef double _tur_theta_type;
  _tur_theta_type tur_theta;





  typedef boost::shared_ptr< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpawnTurtleRequest_

typedef ::turtle_control::SpawnTurtleRequest_<std::allocator<void> > SpawnTurtleRequest;

typedef boost::shared_ptr< ::turtle_control::SpawnTurtleRequest > SpawnTurtleRequestPtr;
typedef boost::shared_ptr< ::turtle_control::SpawnTurtleRequest const> SpawnTurtleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace turtle_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e81a9a00b646492d0f293dca33919db";
  }

  static const char* value(const ::turtle_control::SpawnTurtleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e81a9a00b646492ULL;
  static const uint64_t static_value2 = 0xd0f293dca33919dbULL;
};

template<class ContainerAllocator>
struct DataType< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtle_control/SpawnTurtleRequest";
  }

  static const char* value(const ::turtle_control::SpawnTurtleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tur_name\n"
"float64  pose_x\n"
"float64  pose_y\n"
"float64  tur_theta\n"
"\n"
;
  }

  static const char* value(const ::turtle_control::SpawnTurtleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tur_name);
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.tur_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpawnTurtleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtle_control::SpawnTurtleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtle_control::SpawnTurtleRequest_<ContainerAllocator>& v)
  {
    s << indent << "tur_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tur_name);
    s << indent << "pose_x: ";
    Printer<double>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<double>::stream(s, indent + "  ", v.pose_y);
    s << indent << "tur_theta: ";
    Printer<double>::stream(s, indent + "  ", v.tur_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLE_CONTROL_MESSAGE_SPAWNTURTLEREQUEST_H
